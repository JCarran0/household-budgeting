name: Deploy to Production
on:
  workflow_dispatch:
    inputs:
      deployment_message:
        description: 'Deployment message'
        required: false
        default: 'Manual production deployment'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    environment:
      name: production
      url: https://budget.jaredcarrano.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Build backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build
          npm test
          
      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
          
      - name: Create deployment package
        run: |
          # Create package structure
          mkdir -p deployment/backend deployment/frontend
          
          # Copy backend - preserve directory structure
          cp -r backend/dist/* deployment/backend/
          cp backend/package*.json deployment/backend/
          
          # Copy frontend
          cp -r frontend/dist/* deployment/frontend/
          
          # Generate .env file with secrets and variables
          cat > deployment/backend/.env << EOF
          NODE_ENV=${{ vars.PRODUCTION_NODE_ENV }}
          PORT=${{ vars.PRODUCTION_PORT }}
          JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}
          JWT_EXPIRES_IN=${{ vars.PRODUCTION_JWT_EXPIRES_IN }}
          PLAID_CLIENT_ID=${{ secrets.PRODUCTION_PLAID_CLIENT_ID }}
          PLAID_SECRET=${{ secrets.PRODUCTION_PLAID_SECRET }}
          PLAID_ENV=${{ vars.PRODUCTION_PLAID_ENV }}
          PLAID_PRODUCTS=${{ vars.PRODUCTION_PLAID_PRODUCTS }}
          PLAID_COUNTRY_CODES=${{ vars.PRODUCTION_PLAID_COUNTRY_CODES }}
          DATA_DIR=${{ vars.PRODUCTION_DATA_DIR }}
          ENCRYPTION_KEY=${{ secrets.PRODUCTION_ENCRYPTION_KEY }}
          STORAGE_TYPE=${{ vars.PRODUCTION_STORAGE_TYPE }}
          S3_BUCKET_NAME=${{ vars.PRODUCTION_S3_BUCKET_NAME }}
          S3_PREFIX=${{ vars.PRODUCTION_S3_PREFIX }}
          AWS_REGION=${{ vars.PRODUCTION_AWS_REGION }}
          FRONTEND_URL=${{ vars.PRODUCTION_FRONTEND_URL }}
          API_PREFIX=${{ vars.PRODUCTION_API_PREFIX }}
          LOG_LEVEL=${{ vars.PRODUCTION_LOG_LEVEL }}
          EOF
          
          # Add metadata
          echo "$GITHUB_SHA" > deployment/REVISION
          echo "$(date -u +%Y-%m-%dT%H:%M:%SZ)" > deployment/TIMESTAMP
          
          # Create tarball
          tar -czf deployment.tar.gz deployment/
          
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.PRODUCTION_AWS_REGION }}
          
      - name: Upload to S3
        id: upload
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          S3_PATH="s3://${{ vars.PRODUCTION_S3_BACKUP_BUCKET }}/deployments/deploy-${TIMESTAMP}.tar.gz"
          
          aws s3 cp deployment.tar.gz "$S3_PATH"
          echo "s3_path=$S3_PATH" >> $GITHUB_OUTPUT
          echo "📦 Package uploaded to: $S3_PATH"
          
      - name: Deploy via SSM
        run: |
          echo "🚀 Triggering deployment on EC2..."
          
          # Simple SSM command - just call the deploy script with S3 path
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ vars.PRODUCTION_EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -u appuser /home/appuser/deploy.sh ${{ steps.upload.outputs.s3_path }}\"]" \
            --output text \
            --query "Command.CommandId")
          
          echo "Command ID: $COMMAND_ID"
          
          # Wait for completion
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ vars.PRODUCTION_EC2_INSTANCE_ID }}" || true
          
          # Get status
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ vars.PRODUCTION_EC2_INSTANCE_ID }}" \
            --query "Status" \
            --output text)
          
          echo "Status: $STATUS"
          
          # Show output
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ vars.PRODUCTION_EC2_INSTANCE_ID }}" \
            --query "StandardOutputContent" \
            --output text
          
          if [ "$STATUS" != "Success" ]; then
            echo "=== Error Output ==="
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ vars.PRODUCTION_EC2_INSTANCE_ID }}" \
              --query "StandardErrorContent" \
              --output text
            exit 1
          fi
          
      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          
          # Quick health check
          for i in {1..5}; do
            if curl -s https://budget.jaredcarrano.com/health | grep -q "ok"; then
              echo "✅ Deployment verified!"
              exit 0
            fi
            echo "Retry $i/5..."
            sleep 3
          done
          
          echo "❌ Health check failed"
          exit 1
          
      - name: Summary
        if: success()
        run: |
          echo "### 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Message:** ${{ github.event.inputs.deployment_message }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://budget.jaredcarrano.com" >> $GITHUB_STEP_SUMMARY