name: Deploy to Production (SSM)

on:
  workflow_dispatch:
    inputs:
      deployment_message:
        description: 'Deployment message (optional)'
        required: false
        default: 'Manual production deployment via SSM'
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: Build & Test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install and build backend
        working-directory: ./backend
        run: |
          npm ci  # Need all dependencies for building
          npm run build
          
      - name: Install and build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
          
      - name: Create deployment package
        run: |
          # Create deployment structure
          mkdir -p deployment/backend
          mkdir -p deployment/frontend
          
          # Copy backend files (dist only, dependencies will be installed on server)
          cp -r backend/dist deployment/backend/
          cp backend/package*.json deployment/backend/
          
          # Copy frontend build
          cp -r frontend/dist/* deployment/frontend/
          
          # Create deployment info
          echo "$(git rev-parse --short HEAD)" > deployment/REVISION
          echo "$(date -u +%Y%m%d-%H%M%S)" > deployment/TIMESTAMP
          
          # Create tarball
          tar -czf deployment-package.tar.gz deployment/
          
      - name: Upload deployment package to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Upload deployment package to S3 for retrieval by EC2
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          aws s3 cp deployment-package.tar.gz \
            s3://${{ secrets.S3_BACKUP_BUCKET }}/deployments/deployment-${TIMESTAMP}.tar.gz
          
          # Save the S3 path for later use
          echo "DEPLOYMENT_S3_PATH=s3://${{ secrets.S3_BACKUP_BUCKET }}/deployments/deployment-${TIMESTAMP}.tar.gz" >> $GITHUB_ENV
          
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package.tar.gz
          retention-days: 30

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-test
    name: Deploy to Production via SSM
    environment:
      name: production
      url: https://budget.jaredcarrano.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Get deployment package from previous job
        run: |
          # The S3 path was saved in the previous job
          echo "Deployment will use package from S3"
          
      - name: Deploy via SSM
        id: deploy
        run: |
          # Get the deployment S3 path from the build job
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          S3_PATH="s3://${{ secrets.S3_BACKUP_BUCKET }}/deployments/deployment-${TIMESTAMP}.tar.gz"
          
          # Create deployment script
          cat > deploy-commands.json << 'EOF'
          {
            "commands": [
              "#!/bin/bash",
              "set -e",
              "echo '🚀 Starting SSM-based deployment...'",
              "",
              "# Variables",
              "DEPLOYMENT_DIR=\"/home/appuser/deployments/$(date +%Y%m%d-%H%M%S)\"",
              "APP_DIR=\"/home/appuser/app\"",
              "BACKUP_DIR=\"/home/appuser/backups\"",
              "S3_DEPLOYMENT=\"PLACEHOLDER_S3_PATH\"",
              "",
              "# Create directories",
              "sudo -u appuser mkdir -p \"$DEPLOYMENT_DIR\"",
              "sudo -u appuser mkdir -p \"$BACKUP_DIR\"",
              "",
              "# Download deployment package from S3",
              "echo '📥 Downloading deployment package from S3...'",
              "aws s3 cp \"$S3_DEPLOYMENT\" /tmp/deployment-package.tar.gz",
              "",
              "# Extract deployment package",
              "cd /tmp",
              "tar -xzf deployment-package.tar.gz",
              "sudo -u appuser cp -r deployment/* \"$DEPLOYMENT_DIR/\"",
              "",
              "# Backup current deployment",
              "if [ -d \"$APP_DIR/backend\" ]; then",
              "  echo '📦 Creating backup of current deployment...'",
              "  sudo -u appuser tar -czf \"$BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S).tar.gz\" -C \"$APP_DIR\" .",
              "fi",
              "",
              "# Install backend dependencies",
              "echo '📥 Installing backend dependencies...'",
              "cd \"$DEPLOYMENT_DIR/backend\"",
              "sudo -u appuser npm ci --omit=dev",
              "",
              "# Update environment variables",
              "echo '🔧 Updating environment configuration...'",
              "if [ -f \"$APP_DIR/backend/.env\" ]; then",
              "  sudo -u appuser cp \"$APP_DIR/backend/.env\" \"$DEPLOYMENT_DIR/backend/.env\"",
              "else",
              "  echo 'Warning: No existing .env file found'",
              "fi",
              "",
              "# Update S3 storage configuration",
              "sudo -u appuser tee -a \"$DEPLOYMENT_DIR/backend/.env\" > /dev/null << 'ENVEOF'",
              "",
              "# Storage Configuration (Updated by deployment)",
              "STORAGE_TYPE=s3",
              "S3_BUCKET_NAME=budget-app-data-f5b52f89",
              "S3_PREFIX=data/",
              "AWS_REGION=us-east-1",
              "USE_UNIFIED_STORAGE=true",
              "ENVEOF",
              "",
              "# Stop current application",
              "echo '⏸️  Stopping current application...'",
              "sudo -u appuser pm2 stop budget-backend || true",
              "",
              "# Deploy new version",
              "echo '🔄 Deploying new version...'",
              "sudo -u appuser rm -rf \"$APP_DIR/backend.old\"",
              "[ -d \"$APP_DIR/backend\" ] && sudo -u appuser mv \"$APP_DIR/backend\" \"$APP_DIR/backend.old\"",
              "sudo -u appuser mv \"$DEPLOYMENT_DIR/backend\" \"$APP_DIR/backend\"",
              "",
              "# Deploy frontend",
              "echo '🎨 Deploying frontend...'",
              "sudo -u appuser rm -rf \"$APP_DIR/frontend.old\"",
              "[ -d \"$APP_DIR/frontend\" ] && sudo -u appuser mv \"$APP_DIR/frontend\" \"$APP_DIR/frontend.old\"",
              "sudo -u appuser mv \"$DEPLOYMENT_DIR/frontend\" \"$APP_DIR/frontend\"",
              "",
              "# Start application",
              "echo '▶️  Starting application...'",
              "cd \"$APP_DIR/backend\"",
              "sudo -u appuser pm2 start dist/index.js --name budget-backend --time || sudo -u appuser pm2 restart budget-backend",
              "sudo -u appuser pm2 save",
              "",
              "# Health check",
              "echo '🏥 Running health check...'",
              "sleep 5",
              "for i in {1..10}; do",
              "  if curl -f http://localhost:3001/health 2>/dev/null; then",
              "    echo ''",
              "    echo '✅ Health check passed!'",
              "    break",
              "  fi",
              "  echo 'Waiting for application to start... ('$i'/10)'",
              "  sleep 2",
              "done",
              "",
              "# Cleanup",
              "echo '🧹 Cleaning up...'",
              "rm -f /tmp/deployment-package.tar.gz",
              "rm -rf /tmp/deployment",
              "ls -t \"$BACKUP_DIR\"/*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true",
              "",
              "# Save deployment info",
              "echo '📝 Saving deployment info...'",
              "[ -f /tmp/deployment/REVISION ] && sudo -u appuser cp /tmp/deployment/REVISION \"$APP_DIR/REVISION\"",
              "[ -f /tmp/deployment/TIMESTAMP ] && sudo -u appuser cp /tmp/deployment/TIMESTAMP \"$APP_DIR/TIMESTAMP\"",
              "",
              "echo '✅ Deployment completed successfully!'",
              "echo '📍 Revision: '$(cat $APP_DIR/REVISION 2>/dev/null || echo 'unknown')",
              "echo '🕐 Timestamp: '$(cat $APP_DIR/TIMESTAMP 2>/dev/null || echo 'unknown')"
            ]
          }
          EOF
          
          # Replace the S3 path placeholder
          sed -i "s|PLACEHOLDER_S3_PATH|${S3_PATH}|g" deploy-commands.json
          
          # Execute deployment via SSM
          echo "Executing deployment on instance ${{ secrets.EC2_INSTANCE_ID }}..."
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters file://deploy-commands.json \
            --output text \
            --query "Command.CommandId")
          
          echo "Command ID: $COMMAND_ID"
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV
          
          # Wait for command to complete
          echo "Waiting for deployment to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --timeout 300 || true
          
          # Get command status
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query "Status" \
            --output text)
          
          echo "Deployment status: $STATUS"
          
          # Get command output
          echo "=== Deployment Output ==="
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query "StandardOutputContent" \
            --output text
          
          if [ "$STATUS" != "Success" ]; then
            echo "=== Error Output ==="
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --query "StandardErrorContent" \
              --output text
            exit 1
          fi
          
      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          
          # Check health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" https://budget.jaredcarrano.com/health)
          if [ "$response" = "200" ]; then
            echo "✅ Application is healthy!"
          else
            echo "❌ Health check failed with status: $response"
            exit 1
          fi
          
          # Check frontend
          response=$(curl -s -o /dev/null -w "%{http_code}" https://budget.jaredcarrano.com/)
          if [ "$response" = "200" ]; then
            echo "✅ Frontend is accessible!"
          else
            echo "⚠️  Frontend returned status: $response"
          fi
          
      - name: Cleanup S3 deployment packages
        if: always()
        run: |
          # Keep only the last 5 deployment packages
          aws s3 ls s3://${{ secrets.S3_BACKUP_BUCKET }}/deployments/ \
            | sort -r \
            | tail -n +6 \
            | awk '{print $4}' \
            | xargs -I {} aws s3 rm s3://${{ secrets.S3_BACKUP_BUCKET }}/deployments/{} 2>/dev/null || true
          
      - name: Deployment summary
        if: success()
        run: |
          echo "🎉 Production deployment successful via SSM!"
          echo "📝 Deployment message: ${{ github.event.inputs.deployment_message }}"
          echo "🌐 Application URL: https://budget.jaredcarrano.com"
          echo "📦 Version: $(git rev-parse --short HEAD)"
          echo "🕐 Deployed at: $(date -u +%Y-%m-%d' '%H:%M:%S' UTC')"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "🔒 Deployment method: AWS Systems Manager (no SSH required)"