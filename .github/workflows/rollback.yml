name: Rollback Production

on:
  workflow_dispatch:
    inputs:
      confirm_rollback:
        description: 'Type "ROLLBACK" to confirm rollback'
        required: true
        default: ''
        type: string

jobs:
  rollback:
    runs-on: ubuntu-latest
    name: Rollback Production Deployment
    environment:
      name: production
      url: https://budget.jaredcarrano.com
    
    steps:
      - name: Validate rollback confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_rollback }}" != "ROLLBACK" ]; then
            echo "‚ùå Rollback not confirmed. You must type 'ROLLBACK' to proceed."
            echo "Received: '${{ github.event.inputs.confirm_rollback }}'"
            exit 1
          fi
          echo "‚úÖ Rollback confirmed. Proceeding..."
          
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || \
          ssh-keyscan -H 67.202.9.86 >> ~/.ssh/known_hosts 2>/dev/null
          
      - name: Execute rollback
        env:
          HOST: ${{ secrets.PRODUCTION_HOST }}
          USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/deploy_key ${USER}@${HOST} << 'ROLLBACK_SCRIPT'
          set -e
          
          echo "üîÑ Starting rollback process..."
          
          APP_DIR="/home/appuser/app"
          
          # Check if previous version exists
          if [ ! -d "$APP_DIR/backend.old" ] || [ ! -d "$APP_DIR/frontend.old" ]; then
            echo "‚ùå No previous version found to rollback to"
            echo "Available directories:"
            ls -la "$APP_DIR"
            exit 1
          fi
          
          # Stop current application
          echo "‚è∏Ô∏è  Stopping current application..."
          sudo -u appuser pm2 stop budget-backend || true
          
          # Save failed deployment for investigation
          echo "üíæ Saving failed deployment for investigation..."
          sudo -u appuser rm -rf "$APP_DIR/backend.failed"
          sudo -u appuser rm -rf "$APP_DIR/frontend.failed"
          sudo -u appuser mv "$APP_DIR/backend" "$APP_DIR/backend.failed" 2>/dev/null || true
          sudo -u appuser mv "$APP_DIR/frontend" "$APP_DIR/frontend.failed" 2>/dev/null || true
          
          # Restore previous version
          echo "‚ôªÔ∏è  Restoring previous version..."
          sudo -u appuser mv "$APP_DIR/backend.old" "$APP_DIR/backend"
          sudo -u appuser mv "$APP_DIR/frontend.old" "$APP_DIR/frontend"
          
          # Start application with previous version
          echo "‚ñ∂Ô∏è  Starting previous version..."
          cd "$APP_DIR/backend"
          sudo -u appuser pm2 start dist/index.js --name budget-backend --time
          sudo -u appuser pm2 save
          
          # Health check
          echo "üè• Running health check..."
          sleep 5
          for i in {1..10}; do
            if curl -f http://localhost:3001/health 2>/dev/null; then
              echo ""
              echo "‚úÖ Health check passed!"
              break
            fi
            echo "Waiting for application to start... ($i/10)"
            sleep 2
          done
          
          # Get version info
          if [ -f "$APP_DIR/REVISION" ]; then
            echo "üìç Rolled back to revision: $(cat $APP_DIR/REVISION)"
          fi
          if [ -f "$APP_DIR/TIMESTAMP" ]; then
            echo "üïê Deployment timestamp: $(cat $APP_DIR/TIMESTAMP)"
          fi
          
          echo "‚úÖ Rollback completed successfully!"
          echo ""
          echo "üìù Failed deployment saved in:"
          echo "   - $APP_DIR/backend.failed"
          echo "   - $APP_DIR/frontend.failed"
          echo ""
          echo "To investigate the failure, SSH to the server and check these directories."
          ROLLBACK_SCRIPT
          
      - name: Verify rollback
        env:
          HOST: ${{ secrets.PRODUCTION_HOST }}
        run: |
          echo "üîç Verifying rollback..."
          
          # Wait for application to stabilize
          sleep 10
          
          # Check health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" https://budget.jaredcarrano.com/health)
          if [ "$response" = "200" ]; then
            echo "‚úÖ Application is healthy after rollback!"
          else
            echo "‚ùå Health check failed with status: $response"
            echo "Manual intervention may be required."
            exit 1
          fi
          
          # Check frontend
          response=$(curl -s -o /dev/null -w "%{http_code}" https://budget.jaredcarrano.com/)
          if [ "$response" = "200" ]; then
            echo "‚úÖ Frontend is accessible after rollback!"
          else
            echo "‚ö†Ô∏è  Frontend returned status: $response"
          fi
          
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          
      - name: Rollback summary
        if: success()
        run: |
          echo "‚úÖ Production rollback completed successfully!"
          echo ""
          echo "üîç Next steps:"
          echo "1. Investigate the failed deployment on the server"
          echo "2. Fix the issue in a new PR"
          echo "3. Deploy again when ready"
          echo ""
          echo "üåê Application URL: https://budget.jaredcarrano.com"